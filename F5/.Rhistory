# library
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(tidyr)
library(ggtree)
library(phytools)
library(plyr)
library(ggpubr)
#analysis groups
Yang = c("TbraPV3","EsPV1","TbraPV1","TbraPV2","EsPV3","MscPV2")
Yin = c("RfPV1","EhPV1","EdPV1","HPV41")
other  = c("TbelPV1","HPV204","HPV1","HPV63","CcanPV1","OcPV1","SfPV1","TePV1","CPV1","LwiePV1","CcrPV1","FcaPV1","PlpPV1","UuPV1","LrPV1","PcPV1","CPV6","AmPV4","LwPV1","ElPV1","PlPV1")
all = c(Yang,Yin,other)
#data generated from python
d1 = read.csv("../shared_data/2_PaVE.complete-genomes.fas_ratio.csv")  # read csv file
#add group
d1$color <- ifelse(d1$X %in% Yang, 'Yang',
ifelse (d1$X %in% Yin,'Yin',
ifelse (d1$X %in% other, 'other', "NA")))
d1$color <- factor(d1$color,levels = c("Yang", "Yin", "other","NA"))
d1 =(d1 %>%
filter(color != "NA") %>%
select(everything()))
#convert to long format
d2 <- reshape(d1,
direction = "long",
varying = list(names(d1)[2:18]),
v.names = c("proportion"),
timevar = "dinucleotide",
times = c("AA","AC","AG","AT","CA","CC","CG","CT","GA","GC","GG","GT","TA","TC","TG","TT","%GC"))
dotplot <- ggplot(d1, aes(x = CG, y = X.GC, label=X)) +
geom_point(aes(color=color,size = 10)) +
theme_bw()+
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16,face="bold"),
legend.position = "none") +
xlab("CpG observed/expected") +
ylab("GC content") +
geom_smooth(method=lm, se= FALSE, color="black") +
ylim (30,60)
dotplot
#calculate R2 for regression line
dotplot.lm = lm(X.GC ~ CG, data=d1)
summary(dotplot.lm)
d.CG = (d2 %>%
filter(dinucleotide == "CG") %>%
select(X, proportion, color))
d.CG
means <- ddply(d.CG, c("color"), summarise,
mean=mean(proportion))
means.sem <- ddply(d.CG, c("color"), summarise,
mean=mean(proportion), sem=sd(proportion)/sqrt(length(proportion)))
means.sem <- transform(means.sem, lower=mean-sem, upper=mean+sem)
means.barplot <- ggplot(means, aes(x=color, y=mean)) +
geom_bar(stat = "identity", width=0.2) +
geom_errorbar(aes(ymax=upper,
ymin=lower),
position=position_dodge(0.9),
data=means.sem,
width = 0.1)
means.barplot
CG.lm <- lm(proportion ~ color, data = d.CG)
CG.av <- aov(CG.lm)
summary(CG.av)
tukey.test <- TukeyHSD(CG.av)
tuk <- data.frame(tukey.test$color)
stat.test <- tuk["p.adj"]
#tuk["p.adj"]
stat.test$group1 <- levels(d.CG$color)
stat.test$group2 <- levels(d.CG$color)
stat.test
means.barplot <- means.barplot +
stat_pvalue_manual(
stat.test,
y.position = 0.6, step.increase = 0.15,
label = "p.adj"
) +
theme_bw() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16,face="bold")) +
ylab("CpG observed/expected") +
xlab("")
means.barplot
#tuk["p.adj"]
stat.test$group1 <- levels(d.CG$color)
View(stat.test)
tree = read.tree("../shared_data/subtree_full.tree")  # read tree
pruned.tree<-drop.tip(tree,tree$tip.label[-match(all, tree$tip.label)])
pruned.tree
x <- d.CG$proportion
y <-log(d.CG$proportion)
names(x) <- d.CG$X
names(y) <- d.CG$X
y
plotTree.barplot(pruned.tree,x[pruned.tree$tip.label])
tree$tip.label[-match(all, tree$tip.label)]
tree
plot(tree)
plot(pruned.tree)
d.CG
means <- ddply(d.CG, c("color"), summarise,
mean=mean(proportion))
means.sem <- ddply(d.CG, c("color"), summarise,
mean=mean(proportion), sem=sd(proportion)/sqrt(length(proportion)))
means.sem <- transform(means.sem, lower=mean-sem, upper=mean+sem)
means.barplot <- ggplot(means, aes(x=color, y=mean)) +
geom_bar(stat = "identity", width=0.2) +
geom_errorbar(aes(ymax=upper,
ymin=lower),
position=position_dodge(0.9),
data=means.sem,
width = 0.1)
means.barplot
CG.lm <- lm(proportion ~ color, data = d.CG)
CG.av <- aov(CG.lm)
summary(CG.av)
tukey.test <- TukeyHSD(CG.av)
tuk <- data.frame(tukey.test$color)
stat.test <- tuk["p.adj"]
View(stat.test)
#tuk["p.adj"]
stat.test$group1 <- levels(d.CG$color)
levels(d.CG$color)
View(d.CG)
d.CG
d.CG <-d.CG[!is.na(d.CG)]
CG.lm <- lm(proportion ~ color, data = d.CG)
d.CG = (d2 %>%
filter(dinucleotide == "CG") %>%
select(X, proportion, color))
d.CG
CG.lm <- lm(proportion ~ color, data = d.CG)
d.CG <-d.CG[!is.na(d.CG)]
d.CG = (d2 %>%
filter(dinucleotide == "CG") %>%
select(X, proportion, color))
d.CG
d.CG <- d.CG[!is.na(d.CG$Factor), ]
CG.lm <- lm(proportion ~ color, data = d.CG)
d.CG
d.CG = (d2 %>%
filter(dinucleotide == "CG") %>%
select(X, proportion, color))
d.CG
d.CG
View(d.CG)
d.CG
d.CG$color
d.CG$color  = droplevels(d.CG$color)
d.CG$color
CG.lm <- lm(proportion ~ color, data = d.CG)
CG.av <- aov(CG.lm)
summary(CG.av)
tukey.test <- TukeyHSD(CG.av)
tuk <- data.frame(tukey.test$color)
stat.test <- tuk["p.adj"]
#tuk["p.adj"]
stat.test$group1 <- levels(d.CG$color)
stat.test$group2 <- levels(d.CG$color)
stat.test
means.barplot <- means.barplot +
stat_pvalue_manual(
stat.test,
y.position = 0.6, step.increase = 0.15,
label = "p.adj"
) +
theme_bw() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16,face="bold")) +
ylab("CpG observed/expected") +
xlab("")
means.barplot
# library
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(tidyr)
library(ggtree)
library(phytools)
library(plyr)
library(ggpubr)
#analysis groups
Yang = c("TbraPV3","EsPV1","TbraPV1","TbraPV2","EsPV3","MscPV2")
Yin = c("RfPV1","EhPV1","EdPV1","HPV41")
other  = c("TbelPV1","HPV204","HPV1","HPV63","CcanPV1","OcPV1","SfPV1","TePV1","CPV1","LwiePV1","CcrPV1","FcaPV1","PlpPV1","UuPV1","LrPV1","PcPV1","CPV6","AmPV4","LwPV1","ElPV1","PlPV1")
all = c(Yang,Yin,other)
#data generated from python
d1 = read.csv("../shared_data/2_PaVE.complete-genomes.fas_ratio.csv")  # read csv file
#add group
d1$color <- ifelse(d1$X %in% Yang, 'Yang',
ifelse (d1$X %in% Yin,'Yin',
ifelse (d1$X %in% other, 'other', "NA")))
d1$color <- factor(d1$color,levels = c("Yang", "Yin", "other","NA"))
d1 =(d1 %>%
filter(color != "NA") %>%
select(everything()))
#convert to long format
d2 <- reshape(d1,
direction = "long",
varying = list(names(d1)[2:18]),
v.names = c("proportion"),
timevar = "dinucleotide",
times = c("AA","AC","AG","AT","CA","CC","CG","CT","GA","GC","GG","GT","TA","TC","TG","TT","%GC"))
dotplot <- ggplot(d1, aes(x = CG, y = X.GC, label=X)) +
geom_point(aes(color=color,size = 10)) +
theme_bw()+
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16,face="bold"),
legend.position = "none") +
xlab("CpG observed/expected") +
ylab("GC content") +
geom_smooth(method=lm, se= FALSE, color="black") +
ylim (30,60)
dotplot
postscript(file="dotplot.ps")
dotplot
dev.off()
#calculate R2 for regression line
dotplot.lm = lm(X.GC ~ CG, data=d1)
summary(dotplot.lm)
d.CG = (d2 %>%
filter(dinucleotide == "CG") %>%
select(X, proportion, color))
d.CG
means <- ddply(d.CG, c("color"), summarise,
mean=mean(proportion))
means.sem <- ddply(d.CG, c("color"), summarise,
mean=mean(proportion), sem=sd(proportion)/sqrt(length(proportion)))
means.sem <- transform(means.sem, lower=mean-sem, upper=mean+sem)
means.barplot <- ggplot(means, aes(x=color, y=mean)) +
geom_bar(stat = "identity", width=0.2) +
geom_errorbar(aes(ymax=upper,
ymin=lower),
position=position_dodge(0.9),
data=means.sem,
width = 0.1)
means.barplot
d.CG$color  = droplevels(d.CG$color)
CG.lm <- lm(proportion ~ color, data = d.CG)
CG.av <- aov(CG.lm)
summary(CG.av)
tukey.test <- TukeyHSD(CG.av)
tuk <- data.frame(tukey.test$color)
stat.test <- tuk["p.adj"]
#tuk["p.adj"]
stat.test$group1 <- levels(d.CG$color)
stat.test$group2 <- levels(d.CG$color)
stat.test
means.barplot <- means.barplot +
stat_pvalue_manual(
stat.test,
y.position = 0.6, step.increase = 0.15,
label = "p.adj"
) +
theme_bw() +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=16,face="bold")) +
ylab("CpG observed/expected") +
xlab("")
means.barplot
View(tuk)
View(stat.test)
View(means)
View(d2)
View(d.CG)
tree = read.tree("../shared_data/subtree_full.tree")  # read tree
plot(tree)
pruned.tree<-drop.tip(tree,tree$tip.label[-match(all, tree$tip.label)])
plot(pruned.tree)
x <- d.CG$proportion
y <-log(d.CG$proportion)
names(x) <- d.CG$X
names(y) <- d.CG$X
y
plotTree.barplot(pruned.tree,x[pruned.tree$tip.label])
# library
library(ggtree)
library(car)
library(FSA)
library(dplyr)
library(data.table)
library(ggplot2)
library(tidyr)
library(stringr)
library(seqinr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Yang = c("TbraPV3","EsPV1","TbraPV1","TbraPV2","EsPV3","MscPV2")
Yin = c("RfPV1","EhPV1","EdPV1","HPV41")
other  = c("TbelPV1","HPV204","HPV1","HPV63","CcanPV1","OcPV1","SfPV1","TePV1","CPV1","LwiePV1","CcrPV1","FcaPV1","PlpPV1","UuPV1","LrPV1","PcPV1","CPV6","AmPV4","LwPV1","ElPV1","PlPV1")
all = c(Yin,Yang,other)
# RSCU (Relative Synonymous Codon Usage)
seqs = read.fasta('concatenated.fas')
rscu = NULL;
for (i in seqs) {
tmp = uco(i, frame = 0, index = c('rscu'), as.data.frame = FALSE, NA.rscu = NA)
rscu = rbind(rscu, tmp)
}
rscu = data.frame(rscu)
row.names(rscu) = names(seqs)
rscu$virus = row.names(rscu)
write.csv(rscu, 'rscu.csv')
# convert rscu.cg data to long format and select codons for amino acids in which one or more contains a 'CG'
rscu = read.csv('rscu.csv', row.names = 1) # read RSCU data .csv file
AA = c('gct','gcc','gca','gcg','cct','ccc','cca','ccg','cgt','cgc','cga','cgg','aga','agg','tct','tcc','tca','tcg','agt','agc','act','acc','aca','acg')
rscu.cg = rscu[AA] # create subset of amino acids encoded by CG-containing codons + synonymous codons
rscu.cg$virus = row.names(rscu.cg)
rscu.cg$virus <- factor(rscu.cg$virus)
long = gather(rscu.cg, codon, rscu, gct:acg, factor_key=FALSE) # convert RSCU table to long format
# create data table groups for plotting
letters = c(rep('A', 124), rep('P', 124), rep('R', 186), rep('S',186), rep('T', 124))
long$aa = letters # amino acid letter codes
group = c(rep('other', 21),'yang','yin','yang','yang','yin','yang','yang','yang','yin','yin')
group = rep(group, 24) # analysis groups (yang, yin, other)
long$group = group
long[[2]] <- toupper(long[[2]]) # convert codons to upper case
write.csv(long, 'rscu_plots.csv')
# create boxplot of synonymous-CG codon RSCU values faceted by amino acid
rscu.plots = read.csv('rscu_plots.csv', row.names = 1) # read RSCU .csv file for plotting
head(rscu.plots) # quick check of data
rscu.box = ggplot(rscu.plots, aes(x=codon, y=rscu, fill=group)) +
geom_boxplot(outlier.shape = 21) +
geom_hline(aes(yintercept = 0.6, colour = 'darkred')) +
facet_wrap(~aa, scale="free_x") +
theme_bw()
rscu.box
d1 = read.csv("rscu.csv")  # read csv file
#add group
d1$color <- ifelse(d1$X %in% Yang, 'Yang',
ifelse (d1$X %in% Yin,'Yin',
ifelse (d1$X %in% other, 'other', "NA")))
d1$color <- factor(d1$color,levels = c("Yang", "Yin", "other","NA"))
d1 =(d1 %>%
filter(color != "NA") %>%
select(everything()))
d1 <- d1[c("gcg","ccg","cga","cgc","cgg","cgt", "tcg","acg","color")]
d1$color <- factor(d1$color)
formulae <- lapply(colnames(d1)[1:8], function(x) as.formula(paste0(x, " ~ color")))
res <- lapply(formulae, function(x) summary(aov(x, data = d1)))
tuk <- lapply(formulae, function(x) TukeyHSD(aov(x, data = d1)))
names(res) <- format(formulae)
names(tuk) <- format(formulae)
unlist(lapply(res, function(x) x[[1]]$"Pr(>F)"[1]))
tuk
dat = read.csv("input4R.csv", header = F)
d = transpose(dat[,-1])
colnames(d) <- dat[,1]
d
#convert to long format
d1 <- reshape(d,
direction = "long",
varying = list(names(d)[1:6]),
v.names = c("cusp"),
timevar = "groups",
times = c("Yang-Yang","Yin-Yin","other-other","Yang-Yin","Yang-other","other-Yin"))
d1$groups <- factor(d1$groups, levels = c("Yang-Yang","Yin-Yin","other-other","Yang-Yin","Yang-other","other-Yin"))
#build boxplot
box <- ggplot(d1, aes(groups,cusp)) +
geom_jitter(height = 0, width = 0.05, size = 0.5, color='grey') +
geom_boxplot() +
theme_bw()
box
#test anova assumptions
d1.lm <- lm(cusp ~ groups, data = d1)
d1.av <- aov(d1.lm)
plot(d1.av, 1)
leveneTest(cusp ~ groups, data = d1)
plot(d1.av, 2)
d1.av_residuals <- residuals(object = d1.av)
shapiro.test(x = d1.av_residuals)
#anova rejected, so use Kruskal Wallis and Dunn's post-test
kruskal.test(cusp ~ groups, data = d1) #p-value = 0.0001164
PT = dunnTest(cusp ~ groups,
data=d1,
method="bh") #Benjamini-Hochberg method
PT
box
aa = read.csv("aa_composition_values.csv")
aa
aa$color <- factor(aa$color, levels = c("Yang","Yin","Other"))
means.barplot = ggplot(aa, aes(x=as.factor(AA), y=mean, fill=color, order=as.factor(color))) +
geom_bar(position=position_dodge(), stat="identity", colour='black') +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,position=position_dodge(.9))
means.barplot
